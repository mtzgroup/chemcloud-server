version: "3.8"

services:
  web-server:
    image: mtzgroup/terachem-cloud:latest
    networks:
      - traefik-public
    environment:
      # NOTE: The connection strings here should use local docker network hosts and insecure protocols
      # (since we are within out own secure network)
      # e.g. amqp://admin:super-secret-password@mq:5672
      - CELERY_BROKER_CONNECTION_STRING=${CELERY_BROKER_CONNECTION_STRING}
      # e.g. redis://:super-secret-password@redis:6379/0
      - CELERY_BACKEND_CONNECTION_STRING=${CELERY_BACKEND_CONNECTION_STRING}
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dev-terachem-cloud-https.rule=Host(`tcc.dev.mtzlab.com`)
        - traefik.http.routers.dev-terachem-cloud-https.entrypoints=https
        - traefik.http.routers.dev-terachem-cloud-https.tls=true
        - traefik.http.routers.dev-terachem-cloud-https.tls.certresolver=le
        - traefik.http.services.dev-terachem-cloud.loadbalancer.server.port=8000

  mq:
    networks:
      - traefik-public
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_DEFAULT_PASSWORD}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public

        # RabbitMQ
        - traefik.tcp.routers.dev-rmq.rule=HostSNI(`*`)
        - traefik.tcp.routers.dev-rmq.entrypoints=dev-rabbitmq
        - traefik.tcp.routers.dev-rmq.service=dev-rmq-service
        - traefik.tcp.services.dev-rmq-service.loadbalancer.server.port=5672
        - traefik.tcp.routers.dev-rmq.tls=true
        - traefik.tcp.routers.dev-rmq.tls.certresolver=le

        # MGMT Console
        - traefik.http.routers.dev-rabbitmq-console.rule=Host(`rabbitmq.dev.mtzlab.com`)
        - traefik.http.routers.dev-rabbitmq-console.entrypoints=https
        - traefik.http.routers.dev-rabbitmq-console.tls=true
        - traefik.http.routers.dev-rabbitmq-console.tls.certresolver=le
        - traefik.http.routers.dev-rabbitmq-console.service=dev-rabbitmq-console
        - traefik.http.services.dev-rabbitmq-console.loadbalancer.server.port=15672
  redis:
    networks:
      - traefik-public
    volumes:
      - ./redis.dev.conf:/etc/redis/redis.conf
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public

        # RabbitMQ
        - traefik.tcp.routers.dev-redis.rule=HostSNI(`*`)
        - traefik.tcp.routers.dev-redis.entrypoints=dev-redis
        - traefik.tcp.routers.dev-redis.service=dev-redis-service
        - traefik.tcp.services.dev-redis-service.loadbalancer.server.port=6379
        - traefik.tcp.routers.dev-redis.tls=true
        - traefik.tcp.routers.dev-redis.tls.certresolver=le
    command: redis-server /etc/redis/redis.conf

networks:
  traefik-public:
    external: true
