# CircleCi deploy configuration

# Basic functionality is that:
#  1. All branches and tags trigger test_code
#  2. All non tagged branches also trigger isort, mypy, black, flake8 (redundant to run these all on tagged branches)
#  3. All branches and tags can be approved and deployed to dev
#  4. Only branches tagged with tags using semvar (i.e., x.x.x) can be deployed to prod
version: 2.1

parameters:
  docker_profile:
    type: string
    default: mtzgroup

  tcc_docker_repo:
    type: string
    default: terachem-cloud

  tcc_worker_docker_repo:
    type: string
    default: terachem-cloud-worker

  server_stacks_directory:
    type: string
    default: stacks

commands:
  full_image_name:
    description: Create and write to file FULL_IMAGE_NAME for docker builds
    parameters:
      docker_repo:
        description: The name of the Docker repo to build/push to
        type: string

    steps:
      - run:
          name: Export FULL_IMAGE_NAME based on docker profile, repo, and git tags/branch
          command:
            | # Tag with Github tag if set, otherwise tag with branch name substituting "/" for "-"
            if [ -z $CIRCLE_TAG ]
            then
              TAG=`echo ${CIRCLE_BRANCH//\//-}`
            else
              TAG=$CIRCLE_TAG
            fi

            FULL_IMAGE_NAME=<< pipeline.parameters.docker_profile >>/<< parameters.docker_repo >>:${TAG}
            echo "export FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $BASH_ENV

jobs:
  test_code:
    resource_class: medium
    docker:
      - image: circleci/python:3.7
      - image: rabbitmq:3.8-alpine
      - image: redis:6-alpine
      - image: mtzgroup/terachem-cloud-worker:testing
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-pipfile-lock-{{checksum "Pipfile.lock"}}
            - v2-pipfile-lock-
      - run:
          command: pipenv install --dev --system --deploy
          name: Install dependencies
      - save_cache:
          paths:
            - ~/.local/bin/
            - ~/.local/lib/python3.7/site-packages/
          key: v2-pipfile-lock-{{checksum "Pipfile.lock"}}
      - run:
          command: pytest --cov-report html:test-reports/pytest/htmlcov --cov --junitxml=test-reports/pytest/junit.xml
          name: Test
      - store_test_results: #  Uploads test results to CircleCI. These results will display in the Test Summary section of the CircleCI application.
          name: Store test results
          path: test-reports
      - store_artifacts:
          name: Store artifacts
          path: test-reports

  flake8:
    resource_class: small
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout
      - run: pip install flake8
      - run:
          name: flake8
          command: flake8 --count

  isort:
    resource_class: small
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-pipfile-lock-{{checksum "Pipfile.lock"}}
            - v2-pipfile-lock-
      - run:
          command: pipenv install --dev --system --deploy
          name: Install dependencies
      - save_cache:
          paths:
            - ~/.local/bin/
            - ~/.local/lib/python3.7/site-packages/
          key: v2-pipfile-lock-{{checksum "Pipfile.lock"}}
      - run:
          name: isort
          command: isort --check-only --diff terachem_cloud tests
  mypy:
    resource_class: small
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: pip install mypy pydantic
      - run:
          name: mypy
          command: mypy

  black:
    resource_class: small
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: pip install black
      - run:
          name: black
          command: black . --check

  build:
    parameters:
      docker_repo:
        description: The Docker repo name
        type: string
      dockerfile_name:
        description: The Dockerfile name to use for a build
        default: Dockerfile
        type: string
    docker:
      - image: cimg/base:2020.01
        environment:
          DOCKER_PROFILE: mtzgroup
          DOCKER_REPO_TCC: terachem-cloud
          DOCKER_REPO_TCC_WORKER: terachem-cloud-worker
          WEBSERVER_DOCKERFILE: server.dockerfile
          WORKER_DOCKERFILE: celeryworker.dockerfile
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false # must pay for this feature; would be nice!
      - full_image_name:
          docker_repo: << parameters.docker_repo >>
      - run:
          name: Docker login
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
      - run:
          name: Build image
          command: |
            docker build -t ${FULL_IMAGE_NAME} -f docker/<< parameters.dockerfile_name >> .
      - run:
          name: Push image to Martinez Group Docker Hub
          command: |
            docker image push ${FULL_IMAGE_NAME}
            if [ ! -z $CIRCLE_TAG ]
            then
              LATEST_IMAGE_NAME=<< pipeline.parameters.docker_profile >>/<< parameters.docker_repo >>:latest
              docker tag ${FULL_IMAGE_NAME} ${LATEST_IMAGE_NAME}
              docker image push ${LATEST_IMAGE_NAME}
            fi

  deploy_web:
    parameters:
      stage:
        description: dev or prod
        type: string
      ssh-fingerprint:
        description: SSH fingerprint for docker swarm master nodes
        type: string
    docker:
      - image: cimg/base:2020.01
        environment:
          DOCKER_COMPOSE_FILENAME: docker-compose.web.yaml
          SERVER_FILEPATH: << pipeline.parameters.server_stacks_directory >>/tcc
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << parameters.ssh-fingerprint >>
      - full_image_name:
          docker_repo: << pipeline.parameters.tcc_docker_repo >>
      - run:
          name: Fill docker-compose template with context
          command: |
            source docker/context.<< parameters.stage >>
            eval "echo \"$(cat $(pwd)/docker/${DOCKER_COMPOSE_FILENAME})\"" > ${DOCKER_COMPOSE_FILENAME}
      - run:
          name: Make stack directory on server
          command: |
            ssh-keyscan -H ${MTZLAB_SWARM_HOST} >> ~/.ssh/known_hosts
            ssh ec2-user@${MTZLAB_SWARM_HOST} "mkdir -p ${SERVER_FILEPATH}"
      - run:
          name: Push docker-compose files to server
          command: |
            scp docker/docker-compose.base.yaml "ec2-user@${MTZLAB_SWARM_HOST}:${SERVER_FILEPATH}/docker-compose.base.yaml"
            scp ${DOCKER_COMPOSE_FILENAME} "ec2-user@${MTZLAB_SWARM_HOST}:${SERVER_FILEPATH}/${DOCKER_COMPOSE_FILENAME}"
      - run:
          name: Login server to Martinez Group Docker Repo
          command: |
            ESCAPED_DOCKERHUB_PASSWORD=`printf "%q" ${DOCKERHUB_PASSWORD}` #  pragma: allowlist secret
            ssh ec2-user@${MTZLAB_SWARM_HOST} ESCAPED_DOCKERHUB_PASSWORD=${ESCAPED_DOCKERHUB_PASSWORD} DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} "echo ${ESCAPED_DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin" #  pragma: allowlist secret
      - run:
          name: Deploy docker stack on server
          command: ssh ec2-user@${MTZLAB_SWARM_HOST} "docker stack deploy --with-registry-auth -c ${SERVER_FILEPATH}/docker-compose.base.yaml -c ${SERVER_FILEPATH}/${DOCKER_COMPOSE_FILENAME} tcc"

  deploy_workers:
    parameters:
      stage:
        description: dev or prod
        type: string
    docker:
      - image: cimg/base:2020.01
        environment:
          DOCKER_COMPOSE_FILENAME: docker-compose.xstream.<< parameters.stage >>.yaml
          SERVER_FILEPATH: << pipeline.parameters.server_stacks_directory >>/<< parameters.stage >>/tcc
          XSTREAM_LOGIN_HOST: xstream-login.stanford.edu
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 94:89:ed:6f:77:06:0e:a1:66:73:b6:36:2c:42:9c:7d
      - run:
          name: Install kinit
          command: sudo apt-get update && sudo apt-get install -y krb5-user
      - run:
          name: Configure kinit for Stanford
          command: sudo curl -o /etc/krb5.conf https://web.stanford.edu/dept/its/support/kerberos/dist/krb5.conf
      - full_image_name:
          docker_repo: << pipeline.parameters.tcc_worker_docker_repo >>
      - run:
          name: Fill docker-compose template with context
          command: |
            eval "echo \"$(cat $(pwd)/docker/${DOCKER_COMPOSE_FILENAME})\"" > ${DOCKER_COMPOSE_FILENAME}
      - run:
          name: Login to XStream with kinit
          command: |
            ssh-keyscan -H ${XSTREAM_LOGIN_HOST} >> ~/.ssh/known_hosts
            echo ${STANFORD_PW} | kinit ${STANFORD_UN}@stanford.edu
      - run:
          name: Make stack directory on server
          command: |
            ssh -o ProxyCommand="ssh -o GSSAPIAuthentication=yes -o GSSAPIDelegateCredentials=yes ${STANFORD_UN}@xstream-login.stanford.edu nc xs7-0001 22" -o StrictHostKeyChecking=no ${STANFORD_UN}@xs7-0001 "mkdir -p ${SERVER_FILEPATH}"
      - run:
          name: Push docker-compose files to server
          command: |
            scp -o ProxyCommand="ssh -o GSSAPIAuthentication=yes -o GSSAPIDelegateCredentials=yes ${STANFORD_UN}@xstream-login.stanford.edu nc xs7-0001 22" -o StrictHostKeyChecking=no ${DOCKER_COMPOSE_FILENAME} ${STANFORD_UN}@xs7-0001:${SERVER_FILEPATH}/${DOCKER_COMPOSE_FILENAME}
      - run:
          name: Deploy docker stack on server
          command: |
            ESCAPED_DOCKERHUB_PASSWORD=`printf "%q" ${DOCKERHUB_PASSWORD}` #  pragma: allowlist secret
            ssh -o ProxyCommand="ssh -o GSSAPIAuthentication=yes -o GSSAPIDelegateCredentials=yes ${STANFORD_UN}@xstream-login.stanford.edu nc xs7-0001 22" -o StrictHostKeyChecking=no ${STANFORD_UN}@xs7-0001 ESCAPED_DOCKERHUB_PASSWORD=${ESCAPED_DOCKERHUB_PASSWORD} DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} "echo ${ESCAPED_DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin && docker stack deploy --with-registry-auth -c ${SERVER_FILEPATH}/${DOCKER_COMPOSE_FILENAME} << parameters.stage >>-tcc-worker" #  pragma: allowlist secret

workflows:
  main:
    jobs:
      - test_code:
          filters: # required since various deploy jobs have tag filters AND require test-code https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
            tags:
              only: /.*/
      - black:
          filters:
            tags:
              only: /.*/
      - flake8:
          filters:
            tags:
              only: /.*/
      - isort:
          filters:
            tags:
              only: /.*/
      - mypy:
          filters:
            tags:
              only: /.*/

      # Build Web
      - build_web_approval:
          type: approval
          filters:
            tags:
              only: /.*/ # required since prod_web_deploy requires this step and has tag filters
      - build:
          name: web_build
          requires:
            - test_code
            - build_web_approval
          docker_repo: terachem-cloud
          dockerfile_name: server.dockerfile
          filters:
            tags:
              only: /.*/ # required since prod_web_deploy requires this step and has tag filters

      # Build Workers
      - build_workers_approval:
          type: approval
          filters:
            tags:
              only: /.*/ # required since prod_workers_deploy requires this step and has tag filters
      - build:
          name: worker_build
          requires:
            - test_code
            - build_workers_approval
          docker_repo: terachem-cloud-worker
          dockerfile_name: celeryworker.dockerfile
          filters:
            tags:
              only: /.*/ # required since prod_workers_deploy requires this step and has tag filters

      # Deploy dev
      - dev_deploy_web_approval:
          type: approval
          filters:
            tags:
              only: /.*/
      - deploy_web:
          name: dev_web_deploy
          context: dev-context
          ssh-fingerprint: 35:2d:cc:27:f9:79:bf:6c:c1:7f:24:1d:f4:07:8c:d3
          filters:
            tags:
              only: /.*/
          requires:
            - dev_deploy_web_approval
            - web_build
          stage: dev

      - dev_deploy_workers_approval:
          type: approval
          filters:
            tags:
              only: /.*/
      - deploy_workers:
          name: dev_workers_deploy
          filters:
            tags:
              only: /.*/
          requires:
            - dev_deploy_workers_approval
            - worker_build
          stage: dev

      - prod_deploy_web_approval:
          type: approval
          filters: # Only run on x.x.x tagged branches
            tags:
              only: /\d*\.\d*\.\d*/
            branches:
              ignore: /.*/
      - deploy_web:
          name: prod_web_deploy
          context: prod-context
          ssh-fingerprint: fa:2a:8d:76:3f:41:e5:de:65:88:67:2a:9a:8a:11:ca
          filters:
            tags:
              only: /\d*\.\d*\.\d*/
            branches:
              ignore: /.*/
          requires:
            - prod_deploy_web_approval
            - web_build
          stage: prod

      - prod_deploy_worker_approval:
          type: approval
          filters: # Only run on tagged branches
            tags:
              only: /\d*\.\d*\.\d*/
            branches:
              ignore: /.*/
      - deploy_workers:
          name: prod_workers_deploy
          filters:
            tags:
              only: /\d*\.\d*\.\d*/
            branches:
              ignore: /.*/
          requires:
            - prod_deploy_worker_approval
            - worker_build
          stage: prod
