version: "3"

services:
  web-server:
    build:
      context: ../.
      dockerfile: ./docker/server.dockerfile
    ports:
      - 8000:8000
    environment:
      # Connect to rabbit and redis over docker network instead of localhost
      - bigqc_broker_url=amqp://mq
      - bigqc_backend_url=redis://redis/0
    env_file:
      - ../.env
    volumes:
      - ../qccloud_server:/code/qccloud_server
    command: uvicorn --host 0.0.0.0 --port 8000 qccloud_server.main:app --reload

  worker:
    image: coltonbh/bigqc-worker
    depends_on:
      - mq
      - redis
    environment:
      - bigqc_broker_url=amqp://mq
      - bigqc_backend_url=redis://redis/0
      - TERACHEM_FE_HOST=file-server
    env_file:
      - ../.env
    # Run worker listening to default queue and private_queue
    command: celery -A bigqc.tasks worker -Q celery,private_queue --without-heartbeat --without-mingle --without-gossip --loglevel=INFO

  mq:
    image: rabbitmq:3.8-management-alpine
    # Must specify hostname since data is stored based on hostname and we don't want a random, docker-assigned
    # hostname with each new restart of the service. This would result in any past messages stored by the
    # former container in the volume to be unseen by the new container.
    # https://hub.docker.com/_/rabbitmq/ under "How to use this image"
    hostname: rmq-host1
    ports:
      # Open rabbit to localhost for dev container access
      - 5672:5672
      - 15672:15672

  redis:
    image: redis:6-alpine
    ports:
      # Open redis to localhost for dev container access
      - 6379:6379

  terachem:
    image: mtzgroup/terachem:1.9-2021.12-dev-arch-sm_52-sm_80
    ports:
      - 11111:11111
    volumes:
      - terachem-scratch:/scratch
      # NOTE: Set path to license in .env file
      - ${TERACHEM_LICENSE_PATH:-/nothing/here}:/terachem/license.key
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]

  file-server:
    image: nginx:1.21.6-alpine
    ports:
      - 8080:80
    volumes:
      - terachem-scratch:/usr/share/nginx/html
      - ./nginx.local.conf:/etc/nginx/nginx.conf

volumes:
  terachem-scratch:
networks:
  # This is just a hack so docker works while my VPN is on
  # https://stackoverflow.com/questions/45692255/how-make-openvpn-work-with-docker
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.2.0/24
